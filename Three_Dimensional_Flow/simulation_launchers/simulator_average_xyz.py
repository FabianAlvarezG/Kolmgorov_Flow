import os
import sys
import argparse
import getpass
import socket

username = getpass.getuser()
homefolder = os.path.expanduser('~')
hostname = socket.gethostname()


if username == 'chichi':
    base_class_location = os.path.join(homefolder, 'repos/wilczek/turtle_addons/TurTLE_addons/cpp/full_code')
    cpp_location = os.path.join(homefolder, 'repos/wilczek/KFlow_2D3D/code/exec/')

elif hostname.startswith('alan') or hostname.startswith('uran'):
    base_class_location = os.path.join(homefolder, 'ttf/repos/turtle_addons/TurTLE_addons/cpp/full_code')
    cpp_location = os.path.join(homefolder, 'ttf/repos/KFlow_2D3D/code/exec/')
else:
    base_class_location = None
    cpp_location = None


import numpy as np
import h5py

import TurTLE
import TurTLE.DNS

class simulator(TurTLE.DNS):
    def write_src(
            self):
        self.version_message = (
                '/***********************************************************************\n' +
                '* this code automatically generated by TurTLE\n' +
                '* version {0}\n'.format(TurTLE.__version__) +
                '* Kolmogorov flow database generator\n' +
                '***********************************************************************/\n\n\n')
        self.include_list = [
                '"base.hpp"',
                '"scope_timer.hpp"',
                '"fftw_interface.hpp"',
                '"full_code/main_code.hpp"',
                '"full_code/NSVEparticles.hpp"',
                '<cmath>',
                '<iostream>',
                '<hdf5.h>',
                '<string>',
                '<cstring>',
                '<fftw3-mpi.h>',
                '<omp.h>',
                '<cfenv>',
                '<cstdlib>']
        self.main = """
            int main(int argc, char *argv[])
            {{
                bool fpe = (
                    (getenv("TURTLE_FPE_OFF") == nullptr) ||
                    (getenv("TURTLE_FPE_OFF") != std::string("TRUE")));
                return main_code< {0} >(argc, argv, fpe);
            }}
            """.format(self.dns_type + '<{0}>'.format(self.C_field_dtype))
        self.includes = '\n'.join(
                ['#include ' + hh
                 for hh in self.include_list])
        self.definitions += open(
                os.path.join(
                    base_class_location, 'NSVE_filtered_DB.cpp'), 'r').read()
        print(cpp_location)
        self.definitions += open(
                os.path.join(
                    cpp_location, 'NSVE_filtered_DB_xyz_average.cpp'), 'r').read()
        with open(self.name + '.cpp', 'w') as outfile:
            outfile.write(self.version_message + '\n\n')
            outfile.write(self.includes + '\n\n')
            outfile.write(self.definitions + '\n\n')
            outfile.write(self.main + '\n')
        self.check_current_vorticity_exists = True
        return None
    def generate_default_parameters(self):
        self.parameters['fftw_plan_rigor'] = 'FFTW_ESTIMATE'
        self.parameters['dealias_type'] = int(1)
        self.parameters['dkx'] = float(1.0)
        self.parameters['dky'] = float(1.0)
        self.parameters['dkz'] = float(1.0)
        self.parameters['niter_todo'] = int(8)
        self.parameters['niter_stat'] = int(1)
        self.parameters['niter_out'] = int(8)
        self.parameters['checkpoints_per_file'] = int(1)
        self.parameters['dt'] = float(0.01)
        self.parameters['nu'] = float(0.1)
        self.parameters['fmode'] = int(1)
        self.parameters['famplitude'] = float(0.5)
        self.parameters['friction_coefficient'] = float(0.3)
        self.parameters['energy'] = float(0.5)
        self.parameters['injection_rate'] = float(0.4)
        self.parameters['fk0'] = float(2.0)
        self.parameters['fk1'] = float(4.0)
        self.parameters['forcing_type'] = 'Kolmogorov'
        self.parameters['histogram_bins'] = int(256)
        self.parameters['max_velocity_estimate'] = float(1)
        self.parameters['max_vorticity_estimate'] = float(1)
        self.parameters['niter_DB'] = self.parameters['niter_stat']
        self.parameters['nx_DB'] = self.parameters['nx']
        self.parameters['ny_DB'] = 1
        self.parameters['nz_DB'] = self.parameters['nz']
        self.parameters['DB_snapshots_per_file'] = 10
        self.NSVEp_extra_parameters = {}
        return None
    def write_par(
            self,
            iter0 = 0):
        self.parameters['nx_DB'] = self.parameters['nx']
        self.parameters['ny_DB'] = 1
        self.parameters['nz_DB'] = self.parameters['nz']
        TurTLE.DNS.write_par(self, iter0 = iter0)
        with h5py.File(self.get_data_file_name(), 'r+') as ofile:
            vec_stat_datasets = ['velocity_fluctuations', 'vorticity_fluctuations']
            scal_stat_datasets = []
            for k in vec_stat_datasets:
                time_chunk = 2**20//(8*4*10)
                time_chunk = max(time_chunk, 1)
                a = ofile.create_dataset('statistics/moments/' + k,
                                     (1, 10, 4),
                                     chunks = (time_chunk, 10, 4),
                                     maxshape = (None, 10, 4),
                                     dtype = np.float64)
                time_chunk = 2**20//(8*4*self.parameters['histogram_bins'])
                time_chunk = max(time_chunk, 1)
                ofile.create_dataset('statistics/histograms/' + k,
                                     (1,
                                      self.parameters['histogram_bins'],
                                      4),
                                     chunks = (time_chunk,
                                               self.parameters['histogram_bins'],
                                               4),
                                     maxshape = (None,
                                                 self.parameters['histogram_bins'],
                                                 4),
                                     dtype = np.int64)
        return None
    def add_parser_arguments(
            self,
            parser):
        self.simulation_parser_arguments(parser)
        self.job_parser_arguments(parser)
        self.parameters_to_parser_arguments(parser)
        parser.add_argument(
                '--DNSclass',
                type = str,
                dest = 'DNS_class',
                choices = ['NSVE_filtered_DB_xyz_average'],
                default = 'NSVE_filtered_DB_xyz_average')
        return None

if __name__ == '__main__':
    c = simulator()
    c.launch(args = sys.argv[1:])
